PEP: 398
Title: Python 3.3 Release Schedule
Version: $Revision$
Last-Modified: $Date$
Author: Georg Brandl <georg@python.org>
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 23-Mar-2011
Python-Version: 3.3


Abstract
========

This document describes the development and release schedule for
Python 3.3.  The schedule primarily concerns itself with PEP-sized
items.  Small features may be added up to and including the first beta
release.  Bugs may be fixed until the final release, which is planned
for August 2012.


Release Manager and Crew
========================

- 3.3 Release Manager: Georg Brandl
- Windows installers: Martin v. LÃ¶wis
- Mac installers: Ronald Oussoren/Ned Deily
- Documentation: Georg Brandl


Release Schedule
================

The current schedule is:

- 3.3.0 alpha 1: March 3, 2012
- 3.3.0 alpha 2: March 31, 2012
- 3.3.0 alpha 3: April 28, 2012
- 3.3.0 alpha 4: May 26, 2012
- 3.3.0 beta 1: June 23, 2012

(No new features beyond this point.)

- 3.3.0 beta 2: July 14, 2012
- 3.3.0 candidate 1: July 28, 2012
- 3.3.0 candidate 2: August 11, 2012
- 3.3.0 final: August 18, 2012

.. don't forget to update final date above as well

Every release day listed here is a Saturday; the actual availability
of the release for download on python.org will depend on the schedules
of the crew.


Features for 3.3
================

Candidate PEPs:

* PEP 362: Function Signature Object
* PEP 380: Syntax for Delegating to a Subgenerator
* PEP 382: Namespace Packages
* PEP 393: Flexible String Representation
* PEP 395: Module Aliasing
* PEP 397: Python launcher for Windows
* PEP 3143: Standard daemon process library
* PEP 3151: Reworking the OS and IO exception hierarchy

(Note that these are not accepted yet and even if they are, they might
not be finished in time for Python 3.3.)

Other planned large-scale changes:

* Addition of the "packaging" module, replacing "distutils"
* Implementing ``__import__`` using importlib
* Email version 6
* A standard event-loop interface (PEP by Jim Fulton pending)
* Adding the faulthandler module.
* Breaking out standard library and docs in separate repos?
* A PEP on supplementing C modules with equivalent Python modules?


Copyright
=========

This document has been placed in the public domain.



..
  Local Variables:
  mode: indented-text
  indent-tabs-mode: nil
  sentence-end-double-space: t
  fill-column: 70
  coding: utf-8
  End:
